# create_collection.py
import os
from astrapy import DataAPIClient
from dotenv import load_dotenv

# Load file .env
load_dotenv()

# L·∫•y bi·∫øn m√¥i tr∆∞·ªùng
token = os.getenv("ASTRA_DB_APPLICATION_TOKEN")
endpoint = os.getenv("ASTRA_DB_ENDPOINT")
collection_name = os.getenv("ASTRA_DB_COLLECTION")

if not token or not endpoint or not collection_name:
    raise ValueError("‚ùå Thi·∫øu th√¥ng tin trong file .env (token, endpoint ho·∫∑c collection_name)")

# K·∫øt n·ªëi Astra
client = DataAPIClient(token)
db = client.get_database(endpoint)

def create_collection_if_not_exists():
    try:
        existing_collections = [col["name"] for col in db.list_collections()]
        if collection_name in existing_collections:
            print(f"‚úÖ Collection '{collection_name}' ƒë√£ t·ªìn t·∫°i.")
        else:
            # ‚öôÔ∏è ƒê·ªãnh nghƒ©a chu·∫©n vector 1536 chi·ªÅu
            db.create_collection(
                collection_name,
                definition={
                    "vector": {
                        "dimension": 1536,
                        "metric": "cosine"
                    }
                }
            )
            print(f"‚úÖ ƒê√£ t·∫°o collection '{collection_name}' th√†nh c√¥ng!")

        print("\nüìÇ Danh s√°ch collection hi·ªán c√≥:")
        for col in db.list_collections():
            print(" -", col["name"])

    except Exception as e:
        print("‚ùå L·ªói khi t·∫°o ho·∫∑c ki·ªÉm tra collection:", e)

if __name__ == "__main__":
    print("üîó ƒêang k·∫øt n·ªëi t·ªõi Astra DB...")
    create_collection_if_not_exists()
